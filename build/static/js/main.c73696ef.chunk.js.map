{"version":3,"sources":["logo.svg","Components/Nav/Nav.js","Model/Result.js","Model/MatchManager.js","Model/EasyPlayer.js","Model/MediumPlayer.js","Model/PlayerFactory.js","Model/Dot.js","Model/Line.js","Model/PlayerView.js","Model/CPUMatchManager.js","Model/UserPlayer.js","Components/GameField/Result/Result.js","Components/GameField/GameField.js","Model/LineManager.js","Model/Box.js","Model/BoxManager.js","Model/Field.js","Components/MatchCPU/MatchCPU.js","Components/Stats/Stats.js","Components/Friends/Friends.js","Utils/collapse.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","require","alt","Result","players","player1","player2","score","this","winner","loser","winnerNumber","number","MatchManager","field","isover","currentTurn","result","userInput","id","getLinePlayer","points","drawLine","changeTurn","Score","isFull","console","log","EasyPlayer","name","image","view","possible_moves","getMoves","max","length","Math","floor","random","toString","MediumPlayer","moves","getLastEdges","getNonThirdEdges","setMoves","PlayerFactory","level","Dot","x","y","d","o","compareTo","w","h","d1","d2","Line","a","b","Min","equals","status","player","A","B","getY","PlayerView","getAvailableLines","getWidth","getHeight","to_return","forEach","e","evaluateMove","push","filter","line","val1","checkFirstBox","val2","checkSecondBox","c","getA","getB","isVertical","shift","contains","maxW","maxH","isInside","possibleMovesIncludes","newPlayer","observers","checkOver","play","UserPlayer","props","state","icon","Person","Component","GameField","PAUSE","clickLine","cpu","match","isOver","setState","cpuPlayng","cpuPlay","updateMatchState","getNewMatchManager","CPUMatchManager","async","setTimeout","color","getBoxPlayer","turn","xs","Array","parseInt","keys","ys","getResult","ifIsTurn","map","ycount","key","xcount","linecolor","onClick","boxcolor","gameField","LineManager","lines","Map","generateHor","generateVer","l","set","get","draw","has","value","check","getPlayer","values","Box","root","owner","BoxManager","boxes","generateBoxes","box_count","bx","box","Fill","getBox","getOwner","size","Field","getLineStatus","parseLine","checkVerBoxes","checkHorBoxes","topleft","topright","btmleft","btmright","checkBox","fillBox","checkLine","getAvailable","iterator","getLineOwner","getBoxStatus","getFilledBoxesCount","getBoxesCount","isBoxComplete","coords","split","xy","MatchCPU","to","Play","quitMatch","X","Stats","Graph","Friends","Organization","Collapse","document","getElementById","classList","remove","add","hiServer","fetch","then","res","json","message","onLevelChange","currentTarget","onHeightChange","onWidthChange","path","Rocket","collapse","Tools","ChevronDown","type","checked","onChange","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c73696ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Nav.css';\r\nimport Octicon, {SignIn} from '@primer/octicons-react'\r\nimport {Link} from \"react-router-dom\";\r\nfunction Home()\r\n{\r\n    return(\r\n        <div className=\"nav bg-nav\">\r\n            <div>\r\n              <div className=\"logo\">\r\n\r\n                  <img className=\"rotating\" src={require('../../logo.svg')} alt=\"logo\"></img>\r\n             \r\n  \r\n                  </div>\r\n              <div className=\"user\">\r\n                  <button className=\"login\"> Sign in </button>\r\n              </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","export default class Result{\r\n    winner;\r\n    winnerNumber;\r\n    loser;\r\n    constructor(players)\r\n    {\r\n        var player1 = players[0];\r\n        var player2 = players[1];\r\n        if(player1.score > player2.score)\r\n        {\r\n            this.winner = player1;\r\n            this.loser = player2;\r\n        }\r\n        else\r\n        {\r\n            this.winner = player2;\r\n            this.loser = player1;\r\n        }\r\n\r\n        this.winnerNumber=this.winner.number;\r\n    }\r\n}","import Result from './Result'\r\nexport default class MatchManager\r\n{\r\n    field;\r\n    players;\r\n    currentTurn;\r\n    isover;\r\n    userInput;\r\n\r\n    constructor(field,player1,player2)\r\n    {\r\n        this.field = field;\r\n        this.players = [player1,player2];\r\n        this.isover = false;\r\n        this.currentTurn = 0;\r\n        this.result = null;\r\n        this.userInput = true;\r\n    }\r\n\r\n    play(id)\r\n    {\r\n        if(this.isover==false)\r\n        {\r\n            if(this.field.getLinePlayer(id)==-1)\r\n            {\r\n            var points = this.field.drawLine(id,this.currentTurn);\r\n            if(points == 0) \r\n              this.changeTurn();\r\n            else \r\n            {\r\n                var player = this.players[this.currentTurn];\r\n                player.Score(points);\r\n            } \r\n\r\n            if(this.field.isFull())\r\n               this.isover = true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            console.log('the match is over');\r\n        }\r\n    }\r\n\r\n    changeTurn()\r\n    {\r\n        if(this.currentTurn == 0)\r\n        this.currentTurn = 1;\r\n        else\r\n        this.currentTurn = 0;\r\n\r\n    }\r\n    \r\n    isOver()\r\n    {\r\n        return this.isover;\r\n    }\r\n\r\n    getResult()\r\n    {\r\n        return new Result(this.players);\r\n    }\r\n\r\n\r\n}","\r\n/**\r\n * EasyPlayer\r\n *\r\n * @author Loccions\r\n */\r\nexport default class EasyPlayer{\r\n\r\n\tname;\r\n\tscore;\r\n\tnumber;\r\n\timage;\r\n\r\n\t/**\r\n\t * Instanzia un nuovo RandomPlayer.\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.name = 'Dummy';\r\n\t\tthis.score = 0;\r\n\t\tthis.number = 1;\r\n\t\tthis.image = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Effettua una giocata casuale\r\n\t *\r\n\t * @param view PlayerView\r\n\t * @return Line la linea da tracciare\r\n\t * @throws InterruptedException\r\n\t */\r\n    play(view){\r\n\r\n\t\tvar possible_moves = view.getMoves();\r\n\t\tvar max = possible_moves.length;\r\n\t\tvar i = Math.floor(Math.random() * max);\r\n\t\treturn possible_moves[i].toString();\r\n\t}\r\n\r\n\tScore(points)\r\n\t{\r\n\t\tthis.score+=points;\r\n\t}\r\n\r\n}\r\n","import EasyPlayer from \"./EasyPlayer\";\r\n\r\n/**\r\n * MediumPlayer\r\n * \r\n * @author Loccions\r\n */\r\nexport default class MediumPlayer extends EasyPlayer {\r\n\r\n\t/**\r\n\t * Istanzia un nuovo SimplePlayer\r\n\t */\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.name = 'Medium';\r\n\t\tthis.image = null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Effettua una giocata\r\n\t * Completa un quadrato quando possibile\r\n\t * Se non c'� nessun quadrato effettua una giocata casuale che possibilmente eviti di porre il terzo lato ad un quadrato\r\n\t *\r\n\t * @param view PlayerView\r\n\t * @return Line la linea da tracciare\r\n\t * @throws InterruptedException\r\n\t */\r\n     play(view)\r\n\t{\r\n\t\tvar moves = view.getLastEdges();\r\n\t\tif(moves.length>0) \r\n\t\t    return moves[0].toString();\r\n\t\telse\r\n\t\t{\r\n\t\t\tmoves = view.getNonThirdEdges();\r\n\t\t}\r\n\r\n\t\tif(moves.length>0) \r\n\t\t{\r\n\t\t\tview.setMoves(moves);\r\n\t\t\treturn super.play(view);\r\n\t\t}\r\n\t\telse return super.play(view);\r\n\t}\r\n\r\n\t\r\n\r\n}\r\n","import EasyPlayer from './EasyPlayer'\r\nimport MediumPlayer from './MediumPlayer'\r\nimport HardPlayer from './HardPlayer'\r\n\r\nexport default class PlayerFactory\r\n{\r\n    static newPlayer(level)\r\n    {\r\n        switch(level)\r\n        {\r\n            case 'dummy': return new EasyPlayer();\r\n            case 'medium': return new MediumPlayer();\r\n            case 'impossible': return new EasyPlayer();\r\n            default: return null;\r\n        }\r\n    }\r\n}","\r\n/**\r\n * La classe Dot, rappresenta un punto del campo da gioco e gestisce le operazioni ad esso applicabili. Implementa l'interfaccia\r\n * Comparable e gestisce il confronto tra punti tenendo in considerazione che:\r\n * il primo punto della prima riga del campo da gioco, ovvero quello in alto a sinistra, rappresenta il punto pi� piccolo\r\n * l'ultimo punto dell'ultima riga del campo da gioco, ovvero quello in basso a destra , rappresenta il punto pi� grande\r\n *\r\n * @author Loccions\r\n */\r\n\r\n\r\nexport default class Dot{\r\n\r\n\t/**  coordinata x. */\r\n\tx;\r\n\t\r\n\t/**  coordinata y. */\r\n\ty;\r\n\r\n\r\n\t/**\r\n\t * Instanzia un nuovo punto.\r\n\t *\r\n\t * @param x la coordinata x\r\n\t * @param y la coordinata y\r\n\t */\r\n\tconstructor(x,y)\r\n\t{\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * restituisce la coordinata x\r\n\t *\r\n\t * @return x\r\n\t */\r\n\tgetX()\r\n\t{\r\n\t\treturn this.x;\r\n\t}\r\n\t\r\n\t/**\r\n\t * restituisce la coordinata y\r\n\t *\r\n\t * @return the y\r\n\t */\r\n\tgetY()\r\n\t{\r\n\t\treturn this.y;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Ritorna il punto successivo nella direzione indicata.\r\n\t *\r\n\t * @param d la direzione stringa 'UP' 'DOWN' 'LEFT' 'RIGHT'\r\n\t * @return il punto successivo nella direzione indicata, null se la direzione non � presvista\r\n\t */\r\n\tshift(d)\r\n\t{\r\n\t\tswitch(d)\r\n\t\t{\r\n\t\tcase 'UP': return new Dot(this.x,this.y-1);\r\n\t\t\t\r\n\t\tcase 'DOWN':return new Dot(this.x,this.y+1);\r\n\t\t\t\r\n\t\tcase 'LEFT':return new Dot(this.x-1,this.y);\r\n\t\t\t\r\n\t\tcase 'RIGHT': return new Dot(this.x+1, this.y);\r\n\t\t\r\n\t\tdefault: return null;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t\r\n\tequals(o)\r\n\t{\r\n\t\tif(o != null && (o instanceof Dot))\r\n\t\t{\r\n\t\t\tif(this.compareTo(o)==0) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t\r\n\tcompareTo(o) {\r\n\t\tif(o==null)\r\n\t\t{\r\n\t\t\tthrow \"comparing to null Dot\";\r\n\t\t}\r\n\t\tvar x = o.x;\r\n\t\tvar y = o.y;\r\n\t\t\r\n\t\tif(this.x==x&&this.y==y) return 0;\r\n\t\t\r\n\t\tif(this.y>y || (this.x>x && this.y == y))\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn -1;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\treturn this.x+\"-\"+this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Trova il minore tra due punti\r\n\t */\r\n\tstatic Min(d1,d2) {\r\n\t\tvar result;\r\n\t\tif(d1.compareTo(d2)<0) result = d1;\r\n\t\telse result = d2;\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Controlla se il punto si trova all'interno del campo di dimensioni w e h.\r\n\t *\r\n\t * @param w la larghezza del campo\r\n\t * @param h l'altezza del campo\r\n\t * @return true, se � compreso\r\n\t */\r\n\tisInside(w,h)\r\n\t{\r\n\t\tvar result = false;\r\n\t\tif(this.x<=w && this.x>=0)\r\n\t\t{\r\n\t\t\tif(this.y<=h && this.y>=0)\r\n\t\t\t result =  true;\r\n\t\t\t else result = false;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n","import Dot from './Dot'\r\n/**\r\n * Classe che definisce un oggetto Line, \r\n * la sua responsabilit� � quella di rappresentare una linea del campo di gioco, \r\n * ovvero un lato di di uno o pi� quadrati. La classe implementa l'interfaccia Comparable e gestisce il confronto tra linee\r\n * considerando nel campo di gioco:\r\n * la prima linea della prima riga di linee orizzontali, ovvero la prima in alto a sinistra, come la pi� piccola. \r\n * l'ultima linea dell'ultima riga di linee orizzontali, ovvero l'ultima in basso a destra, come la pi� grande.\r\n * due linee rappresentate dagli stessi due punti sono considerate equivalenti \r\n * a prescindere dal valore di status e dall'ordine dei punti\r\n * \r\n *\r\n * @author Loccions\r\n */\r\n\r\nexport default class Line{\r\n\t\r\n\t/**  punto a. */\r\n\ta;\r\n\t\r\n\t/**  punto b. */\r\n\tb;\t\r\n\t\r\n\t/**  -1 linea non tracciata, 0 linea tracciata dal primo giocatore, 1 dal secondo */\r\n\tstatus;\r\n\t\r\n\t/**\r\n\t * Istanzia una nuova linea, imposta i punti assegnando ad \"a\" il punto minore tra quelli indicati come parametro\r\n\t *\r\n\t * @param a il punto a\r\n\t * @param b il punto b\r\n\t */\r\n    constructor(a,b) \r\n\t{\r\n\t\t   this.a = Dot.Min(a,b);\r\n\t\t   this.b = this.a.equals(a)?b:a;\r\n\t\t   this.status=-1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * ritorna il punto a.\r\n\t *\r\n\t * @return il punto a\r\n\t */\r\n\tgetA() {\r\n\t\treturn this.a;\r\n\t}\r\n\t\r\n\t/**\r\n\t * ritorna il punto b.\r\n\t *\r\n\t * @return il punto b\r\n\t */\r\n\tgetB() {\r\n\t\treturn this.b;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Controlla se la linea � tracciata.\r\n\t *\r\n\t * @return true, se la linea � tracciata\r\n\t */\r\n\tcheck()\r\n\t{\r\n\t\treturn this.status>-1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Traccia la linea.\r\n\t *\r\n\t * @param player numero giocatore che ha tracciato la linea, 0 primo giocatore, 1 secondo giocatore.\r\n\t */\r\n\tdraw(player)\r\n\t{\r\n\t\tthis.status = player;\r\n\t}\r\n\r\n    compareTo(o) {\r\n\t\tif(o==null) throw \"comparing to null edge\";\r\n\t\tvar a = o.a.compareTo(o.b)<0?o.a:o.b;\r\n\t\tvar b = o.a.compareTo(o.b)<0?o.b:o.a;\r\n\t\tvar A = this.a.compareTo(this.b)<0?this.a:this.b;\r\n\t\tvar B = this.a.compareTo(this.b)<0?this.b:this.a;\r\n\t\t\r\n\t\tif(A.compareTo(a)>0) return 1;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(A.compareTo(a)==0)\r\n\t\t\t{\r\n\t\t\t\tif(B.compareTo(b)==0) return 0;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(B.compareTo(b)>0) return 1;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n    equals(o)\r\n\t{\r\n\t\tif(o!=null && o instanceof Line)\r\n\t\t{\r\n\t\t\tif(this.compareTo(o)==0) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Ritorna Line sotto forma di stringa secondo la rappresentazione \"Ax Ay Bx By\"\r\n\t * dove A e B sono i punti ed x e y le coordinate\r\n\t *\r\n\t * @return Line sotto forma di stringa\r\n\t */\r\n    toString()\r\n\t{\r\n\t\tvar A = this.a.compareTo(this.b)<0?this.a:this.b;\r\n\t\tvar B = this.a.compareTo(this.b)<0?this.b:this.a;\r\n\t\treturn A.toString()+\" \"+B.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * restituisce un intero che rappresenti il giocatore che ha tracciato la linea\r\n\t *\r\n\t * @return 0 o 1 se la linea � tracciata, -1 se la linea non � tracciata\r\n\t */\r\n\tgetPlayer() {\r\n\t\treturn this.status;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Controlla se la linea � orientata verticalmente.\r\n\t *\r\n\t * @return true, se � verticale\r\n\t */\r\n\tisVertical()\r\n\t{\r\n\t\treturn this.a.getY()!=this.b.getY();\r\n\t}\r\n\r\n\t\r\n}\r\n","import Line from './Line'\r\n/**\r\n *La Classe PlayerView rappresenta il punto di vista di un giocatore rispetto al campo da gioco, la sua responsabilit� \r\n *� quella di fornire al giocatore tutti i dati necessari a giocare senza dover interagire direttamente con il campo da gioco.\r\n * \r\n * @author Loccions\r\n */\r\nexport default class PlayerView {\r\n\t\r\n\t/** dimensioni del campo. */\r\n\tw;h;\r\n\t\r\n\t/**  linee disponibili da tracciare. */\r\n\tpossible_moves;\r\n\r\n\t/**\r\n\t * Instanzia un nuovo FieldView.\r\n\t *\r\n\t * @param field il campo da gioco\r\n\t */\r\n\tconstructor(field) {\r\n\t\tthis.possible_moves = field.getAvailableLines();\r\n\t\tthis.w = field.getWidth();\r\n\t\tthis.h = field.getHeight();\r\n\t}\r\n\r\n\t/**\r\n\t * Restituisce la larghezza del campo.\r\n\t *\r\n\t * @return la larghezza\r\n\t */\r\n\tgetWidth() {\r\n\t\t\r\n\t\treturn this.w;\r\n\t}\r\n\r\n\t/**\r\n\t * Restituisce l'altezza del campo.\r\n\t *\r\n\t * @return l'altezza\r\n\t */\r\n\tgetHeight() {\r\n\t\r\n\t\treturn this.h;\r\n\t}\r\n\r\n\t/**\r\n\t * Restituisce le linne disponibili da tracciare.\r\n\t *\r\n\t * @return le linee tracciabili\r\n\t */\r\n\tgetMoves() {\r\n\r\n\t\treturn this.possible_moves;\r\n\t}\r\n\r\n\t/**\r\n\t * Imposta l'insieme di linee tracciabili.\r\n\t *\r\n\t * @param moves Collection di linee\r\n\t */\r\n\tsetMoves(moves) {\r\n\t\t\r\n\t    this.possible_moves = moves;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restituisce l'insieme di linee non tracciate rappresentano l'ultima linea per completare un quadrato\r\n\t *\r\n\t * @return Collection<Line>\r\n\t */\r\n\tgetLastEdges()\r\n\t{\r\n\t\tvar to_return = [];\r\n\t\tthis.possible_moves.forEach(e => {\r\n\t\t\tif(this.evaluateMove(e)==3)\r\n\t\t\t{\r\n\t\t\t    to_return.push(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\t);\r\n\r\n\t\treturn to_return;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restituisce l'insieme di linee non tracciate escluse quelle\r\n\t * che fanno parte di quadrati con due lati gi� tracciati\r\n\t *\r\n\t * @return Collection<Line>\r\n\t */\r\n\tgetNonThirdEdges()\r\n\t{\r\n\t\treturn this.possible_moves.filter(e => this.evaluateMove(e)!=2);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Valuta una linea non tracciata e restituisce un int come risultato, \r\n\t * il risultato rappresenta il numero di lati gi� tracciati del quadrato a cui appartiene la linea,\r\n\t * tra i due quadrati adiacenti viene scelto quello col maggior numero di lati tracciati come risultato.\r\n\t *\r\n\t * @param line la linea da tracciare\r\n\t * @return int risultato della valutazione, \r\n\t * 0 sarebbe prima linea tracciata del quadrato, \r\n\t * 1 il quadrato ha gi� una linea tracciata,\r\n\t * 2 sarebbe il terzo lato tracciato del quadrato,\r\n\t * 3 completerebbe il quadrato\r\n\t */\r\n\tevaluateMove(line) {\r\n\t\tvar val1 = this.checkFirstBox(line);\r\n\t\tvar val2 = this.checkSecondBox(line);\r\n\t\treturn val1>val2?val1:val2;\r\n\t}\r\n\r\n\t/**\r\n\t * Valuta una linea a seconda della condizione del quadrato ad essa adiacente.\r\n\t * quadrato inferiore se la linea � orizzontale\r\n\t * quadrato a destra se la linea � verticale\r\n\t *\r\n\t * @param line la linea da valutare\r\n\t * @return  int risultato della valutazione\r\n\t */\r\n\tcheckSecondBox(line) {\r\n\t\tvar result = 0;\r\n\t\tvar a,b,c,d;\r\n\t\ta = line.getA();\r\n\t\tb = line.getB();\r\n\t\tif(!line.isVertical())\r\n\t\t{\r\n\t\t\td = a.shift('DOWN');\r\n\t\t\tc = b.shift('DOWN');\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\td = a.shift('RIGHT');\r\n\t\t\tc = b.shift('RIGHT');\r\n\t\t}\r\n\t\tif(!this.contains(new Line(b,c))) result++;\r\n\t\tif(!this.contains(new Line(c,d))) result++;\r\n\t\tif(!this.contains(new Line(d,a))) result++;\r\n\t\t\r\n\t    return result;\r\n\t}\r\n\r\n\t/**\r\n\t * Valuta una linea a seconda della condizione del quadrato ad essa adiacente.\r\n\t * quadrato superiore se la linea � orizzontale\r\n\t * quadrato a sinistra se la linea � verticale\r\n\t *\r\n\t * @param line la linea da valutare\r\n\t * @return  int risultato della valutazione\r\n\t */\r\n\tcheckFirstBox(line) {\r\n\t\tvar result = 0;\r\n\t\tvar a,b,c,d;\r\n\t\ta = line.getA();\r\n\t\tb = line.getB();\r\n\t\tif(!line.isVertical())\r\n\t\t{\r\n\t\t\td = a.shift('UP');\r\n\t\t\tc = b.shift('UP');\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\td = a.shift('LEFT');\r\n\t\t\tc = b.shift('LEFT');\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif(!this.contains(new Line(b,c))) result++;\r\n\t\tif(!this.contains(new Line(c,d))) result++;\r\n\t\tif(!this.contains(new Line(d,a))) result++;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Controlla se la linea � contenuta nell'insieme di linee tracciabili\r\n\t *\r\n\t * @param line la linea da controllare\r\n\t * @return true se la linea � contenuta tra quelle non tracciate, false se la linea � gi� tracciata o non fa parte del campo da gioco\r\n\t */\r\n\tcontains(line) {\r\n\t\tvar maxW = this.w-1;\r\n\t\tvar maxH = this.h-1;\r\n\t\tif(line.getA().isInside(maxW, maxH)&&line.getB().isInside(maxW, maxH)) {return this.possibleMovesIncludes(line);}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpossibleMovesIncludes(line)\r\n\t{\r\n\t\tvar result = false;\r\n\t\tthis.possible_moves.forEach(e=>{\r\n\t\t\tif(e.toString()==line.toString()) return (result = true);\r\n\t\t})\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Aggiorna la PlayerView \r\n\t *\r\n\t * @param field il campo da gioco\r\n\t */\r\n\tupdate(field) {\r\n\t\tthis.possible_moves = field.getAvailableLines();\r\n\t\tthis.w = field.getWidth();\r\n\t\tthis.h = field.getHeight();\r\n\t}\r\n\r\n}\r\n","import Result from './Result'\r\nimport PlayerFactory from './PlayerFactory'\r\nimport PlayerView from './PlayerView'\r\nexport default class MatchManager\r\n{\r\n    field;\r\n    players;\r\n    currentTurn;\r\n    isover;\r\n    userInput;\r\n\r\n\r\n    constructor(field,player1,level)\r\n    {\r\n        this.field = field;\r\n        var player2 = PlayerFactory.newPlayer(level);\r\n        this.players = [player1,player2];\r\n        this.isover = false;\r\n        this.currentTurn = 0;\r\n        this.result = null;\r\n        this.userInput = true;\r\n        this.observers = [];\r\n    }\r\n\r\n    play(id)\r\n    {\r\n        if(this.field.getLinePlayer(id)==-1)\r\n        {\r\n        var points = this.field.drawLine(id,this.currentTurn);\r\n        var player = this.players[this.currentTurn];\r\n        if(points==0) this.changeTurn();\r\n        player.Score(points);\r\n        this.checkOver();\r\n        }    \r\n    }\r\n\r\n    cpuPlay()\r\n    {\r\n        var id  = this.players[1].play(new PlayerView(this.field));\r\n        var points = this.field.drawLine(id,this.currentTurn);\r\n        var player = this.players[this.currentTurn];\r\n        if(points==0) this.changeTurn();\r\n        player.Score(points);\r\n        this.checkOver();\r\n    }\r\n      \r\n\r\n    checkOver()\r\n    {\r\n        if(this.field.isFull())\r\n                this.isover = true;\r\n    }\r\n\r\n    changeTurn()\r\n    {\r\n        if(this.currentTurn == 0)\r\n        {\r\n            this.currentTurn = 1;\r\n            this.userInput = false;\r\n        }\r\n        else\r\n        {\r\n            this.currentTurn = 0;\r\n            this.userInput = true;\r\n        }\r\n       \r\n    }\r\n    \r\n    isOver()\r\n    {\r\n        return this.isover;\r\n    }\r\n\r\n    getResult()\r\n    {\r\n        return new Result(this.players);\r\n    }\r\n\r\n\r\n}","\r\n/**\r\n * La classe RealPlayer rappresenta un giocatore controllato dall'utente che effettua la giocata \r\n * in base al valore indicato in input\r\n *\r\n * @author Loccions\r\n */\r\nexport default class UserPlayer {\r\n\r\n\tname;\r\n\tscore;\r\n\tnumber;\r\n\timage;\r\n\r\n\t/**\r\n\t * Istanzia un nuovo RealPlayer con un nome personalizzato\r\n\t *\r\n\t * @param name il nome del giocatore\r\n\t */\r\n\tconstructor(name,number,image) {\r\n\t\tthis.name = name;\r\n\t\tthis.score = 0;\r\n\t\tthis.number = number;\r\n\t\tif(image)this.image = image;\r\n\t\telse this.image = null;\r\n\t}\r\n\r\n\tScore(points)\r\n\t{\r\n\t\tthis.score+=points;\r\n\t}\r\n\t\r\n\r\n}\r\n","import React,{Component} from 'react';\r\nimport './Result.css'\r\nimport '../GameField.css'\r\nimport Octicon,{Person} from '@primer/octicons-react'\r\n\r\nexport default class Result extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            result: props.result\r\n        };\r\n    }\r\n\r\n    render()\r\n    {\r\n        return <>{\r\n            this.state.result.winnerNumber==0?\r\n        <div className=\"flex-row score1 score-res active1\" >\r\n         \r\n        <div className=\"circle bg-main\"><Octicon className=\"p text-blue\" icon={Person}></Octicon></div>\r\n     \r\n            <div id=\"winner\">\r\n            The winner is <b>{this.state.result.winner.name}</b><br/>\r\n                <strong>{this.state.result.winner.score} : {this.state.result.loser.score}</strong>\r\n            </div>\r\n         \r\n            </div>\r\n            :\r\n            <div className=\"flex-row score2 score-res active2\"  >\r\n              <div id=\"winner\" >\r\n                The winner is <b>{this.state.result.winner.name}</b><br/>\r\n                <strong>{this.state.result.winner.score} : {this.state.result.loser.score}</strong>\r\n            </div>\r\n\r\n            <div className=\"circle bg-main \"><Octicon className=\"p text-red\" icon={Person}></Octicon></div></div>\r\n        \r\n            }</>\r\n           \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport  Octicon , {Person} from '@primer/octicons-react'\r\nimport './GameField.css';\r\nimport MatchManager from '../../Model/MatchManager'\r\nimport CPUMatchManager from '../../Model/CPUMatchManager'\r\nimport UserPlayer from '../../Model/UserPlayer'\r\nimport Result from './Result/Result'\r\n  \r\n\r\n\r\nclass GameField extends Component\r\n{\r\n    PAUSE = 150;\r\n    clickLine = ()=>{};\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            x:props.field.getWidth()-1,\r\n            y:props.field.getHeight()-1,\r\n            match: this.getNewMatchManager(props.field,props.level),\r\n            cpuPlayng:false\r\n\r\n        }\r\n        if(this.state.match instanceof CPUMatchManager)\r\n        {\r\n            this.clickLine = async (id)=>{\r\n                if(!this.state.match.isOver())\r\n                {\r\n                    if(this.state.match.userInput)\r\n                    {\r\n                        var match = this.state.match;\r\n                        match.play(id);\r\n                        this.updateMatchState(match);\r\n                        if(this.state.match.currentTurn==1)\r\n                        this.setState({cpuPlayng:true});\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    console.log('the match is over');\r\n                }\r\n            };\r\n\r\n        }\r\n        else this.clickLine = (id)=>{\r\n            if(this.state.match.userInput)\r\n            {\r\n                var match = this.state.match;\r\n                match.play(id);\r\n                this.updateMatchState(match);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    cpu =()=>{\r\n\r\n        if (this.state.match.currentTurn==0||this.state.match.isOver()) {\r\n            this.setState({ cpuPlayng: false })\r\n            return\r\n        }\r\n        var match = this.state.match;\r\n        match.cpuPlay();\r\n        this.updateMatchState(match);\r\n                  \r\n    }\r\n\r\n    componentDidUpdate()\r\n    {\r\n       if(this.state.cpuPlayng)setTimeout(this.cpu,this.PAUSE);\r\n    }\r\n\r\n    updateMatchState(match)\r\n    {\r\n        this.setState({match:match});\r\n    }\r\n\r\n    getNewMatchManager(field,level)\r\n    {\r\n        switch (level)\r\n        {\r\n            case 'dummy':return new CPUMatchManager(field,new UserPlayer('You',0),level);\r\n            case 'medium':return new CPUMatchManager(field,new UserPlayer('You',0),level);\r\n            case 'impossible': return new CPUMatchManager(field,new UserPlayer('You',0),level);\r\n            default: return new MatchManager(field, new UserPlayer('Player 1',0),new UserPlayer('Player 2',1));\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    linecolor(id){\r\n        if(this.state.match.field.getLinePlayer(id)==0)\r\n        return ' line-blue'\r\n        if(this.state.match.field.getLinePlayer(id)==1) return ' line-red'\r\n        \r\n        return ' '\r\n    };\r\n\r\n    boxcolor(id){\r\n        var color = this.state.match.field.getBoxPlayer(id);\r\n        if(color==-1)\r\n        return ' '\r\n        else\r\n        {\r\n            if(color==0) return ' bg-blue fillbox'\r\n            else return ' bg-red fillbox'\r\n        }\r\n        \r\n    };\r\n\r\n    ifIsTurn(turn)\r\n    {\r\n        if(this.state.match.currentTurn===turn)\r\n        {\r\n            if(turn==0)\r\n            return ' active1';\r\n            else return ' active2';\r\n        }\r\n        else return '';\r\n    }\r\n\r\n    gameField(x,y)\r\n    {\r\n        var xs = [...Array(parseInt(x,10)).keys()];\r\n        var ys = [...Array(parseInt(y,10)+1).keys()];\r\n        var gamefield = <>\r\n        <div className=\"score flex-row\" id=\"score\">\r\n                {\r\n                this.state.match.isOver()?<Result result = {this.state.match.getResult()}></Result>\r\n                :<>\r\n                <div className={\"flex-row score1\"+this.ifIsTurn(0)}>\r\n                <div className=\"circle bg-main\"><Octicon className=\"p text-blue\" icon={Person}></Octicon></div>\r\n             \r\n                    <p>\r\n                        {this.state.match.players[0].name}<br/>\r\n                        <strong>{this.state.match.players[0].score}</strong>\r\n                    </p>\r\n                    </div>\r\n                    <div className={\"flex-row score2\"+this.ifIsTurn(1)}>\r\n                    <p>\r\n                        {this.state.match.players[1].name}<br/>\r\n                        <strong>{this.state.match.players[1].score}</strong>\r\n                    </p>\r\n\r\n                    <div className=\"circle bg-main\"><Octicon className=\"p text-red\" icon={Person}></Octicon></div>\r\n                    </div></>\r\n                }\r\n               \r\n        </div>\r\n        <div className='field'>\r\n            \r\n            { \r\n                ys.map(ycount =>{\r\n\r\n                    if(ycount<y)\r\n                    return  <div className=\"row\" id={ycount} key={ycount} >\r\n                    {xs.map(xcount=>\r\n                    {\r\n                        if(xcount<x-1)\r\n                        return <div className=\"block\" key={xcount+\"-\"+ycount}>\r\n                       <div className=\"layer\">\r\n                           <div className={\"line hor \"+this.linecolor(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)} id={xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount} >\r\n                               <div className=\"hitbox\" onClick={() => this.clickLine(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)}></div>\r\n                           </div>\r\n                       </div>\r\n                       <div className=\"layer\">\r\n                           <div className={\"line ver \"+this.linecolor(xcount+\"-\"+ycount+\" \"+xcount+\"-\"+(ycount+1))} id={xcount+\"-\"+ycount+\" \"+xcount+\"-\"+(ycount+1)} >\r\n                           <div className=\"hitbox\" onClick={() => this.clickLine(xcount+\"-\"+ycount+\" \"+xcount+\"-\"+(ycount+1))}></div>\r\n                           </div>\r\n                           <div className={\"box \" + this.boxcolor(xcount+\"-\"+ycount)} id={xcount+\"-\"+ycount}>\r\n                           </div>\r\n                       </div>  \r\n                    </div>;\r\n                    else \r\n                    return <div className=\"block\" key={xcount+\"-\"+ycount} >\r\n                       <div className=\"layer\">\r\n                           <div className={\"line hor endrow \" + this.linecolor(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)} id={xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount}   >\r\n                           <div className=\"hitbox\" onClick={() => this.clickLine(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)}></div>\r\n                           </div>\r\n                       </div>\r\n                       <div className=\"layer\">\r\n                           <div className={\"line ver \"+this.linecolor(xcount+\"-\"+ycount+\" \"+xcount+\"-\"+(ycount+1))} id={xcount+\"-\"+ycount+\" \"+xcount+\"-\"+(ycount+1)}  >\r\n                           <div className=\"hitbox\" onClick={() => this.clickLine(xcount+\"-\"+ycount+\" \"+xcount+\"-\"+(ycount+1))} ></div>\r\n                           </div>\r\n                           <div className={\"box \" + this.boxcolor(xcount+\"-\"+ycount)} id={xcount+\"-\"+ycount}>\r\n                           </div>\r\n                           <div className={\"line ver \"+this.linecolor((xcount+1)+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+(ycount+1))} id={(xcount+1)+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+(ycount+1)}>\r\n                           <div className=\"hitbox\"  onClick={() => this.clickLine((xcount+1)+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+(ycount+1))}></div>\r\n                           </div>\r\n                       </div>  \r\n                    </div>;\r\n                    })}\r\n                </div>;\r\n                else\r\n                return  <div className=\"row\" id={ycount} key={ycount}>\r\n                    {\r\n                        xs.map(xcount =>{\r\n                            if(xcount<x-1)\r\n                            return <div className=\"block\" key={xcount+\"-\"+ycount} >\r\n                           <div className=\"layer\">\r\n                               <div className={\"line hor\"+this.linecolor(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)} id={xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount} >\r\n                               <div className=\"hitbox\" onClick={() => this.clickLine(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)}></div>\r\n                               </div>\r\n                           </div> \r\n                        </div>;\r\n                        else \r\n                        return <div className=\"block\" key={xcount+\"-\"+ycount} >\r\n                           <div className=\"layer\">\r\n                               <div className={\"line hor endrow\"+this.linecolor(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)} id={xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount} >\r\n                               <div className=\"hitbox\" onClick={() => this.clickLine(xcount+\"-\"+ycount+\" \"+(xcount+1)+\"-\"+ycount)}></div>\r\n                               </div>\r\n                           </div>\r\n                        </div>})\r\n                    }\r\n\r\n                </div>\r\n              \r\n\r\n\r\n                })\r\n            }\r\n        </div></>;\r\n\r\n        return gamefield;\r\n    }\r\n    \r\n\r\n    render()\r\n    {\r\n        return(\r\n        this.gameField(this.state.x,this.state.y))\r\n    }\r\n}\r\n\r\nexport default GameField;","\r\nimport Line from './Line'\r\nimport Dot from './Dot'\r\n/**\r\n * Classe LineManagerMap, implementa l'interfaccia LineManager utilizzando una TreeMap\r\n * come struttura dati per l'insieme di linee del campo da gioco\r\n * \r\n * @author Loccions\r\n */\r\nexport default class LineManager{\r\n\t\r\n\t/**  map di linee. */\r\n\tlines;\r\n\t\r\n\t/**\r\n\t * Instanzia un nuovo LineManager e genera automaticamente le linee\r\n\t *\r\n\t * @param h altezza campo\r\n\t * @param w larghezza campo\r\n\t */\r\n\tconstructor(h,w)\r\n\t{\r\n\t\tthis.lines = new Map();\r\n\t\tthis.generateHor(h,w);\r\n\t\tthis.generateVer(h,w);\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * genera le linee orizzontali presenti nel campo da gioco di dimensioni h e w\r\n\t *\r\n\t * @param h altezza campo\r\n\t * @param w larghezza campo\r\n\t */\r\n\tgenerateHor(h,w)\r\n\t{\r\n\t\tfor(var y = 0; y < h ; y++)\r\n\t\t{\r\n\t\t\tfor(var x = 0; x < w-1 ; x++)\r\n\t\t\t{\r\n\t\t\t\tvar a = new Dot(x,y);\r\n\t\t\t\tvar b = new Dot(x+1,y);\r\n\t\t\t\tvar l = new Line(a,b);\r\n\t\t\t\tthis.lines.set(l.toString(), l);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * genera le linee verticali presenti nel campo da gioco di dimensioni h e w\r\n\t *\r\n\t * @param h altezza campo\r\n\t * @param w larghezza campo\r\n\t */\r\n\tgenerateVer(h,w)\r\n\t{\r\n      \r\n\t\tfor(var y = 0; y <h-1 ; y++)\r\n\t\t{\r\n\t\t\tfor(var x = 0; x < w ; x++)\r\n\t\t\t{\r\n\t\t\t\tvar a = new Dot(x,y);\r\n\t\t\t\tvar b = new Dot(x,y+1);\r\n\t\t\t\tvar l = new Line(a,b);\r\n\t\t\t\tthis.lines.set(l.toString(),l);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\tdraw(line,player) {\r\n\t\tthis.lines.get(line).draw(player);\r\n\t}\r\n\r\n\tcontains(line) {\r\n\t\r\n\t\treturn this.lines.has(line.toString());\r\n\t}\r\n\t\r\n\tgetAvailable() {\r\n\t\t\r\n\t\tvar to_return = [];\r\n\t\tthis.lines.forEach((value,key)=>{\r\n\t\t\tif(!value.check())\r\n\t\t\t{\r\n\t\t\t\tto_return.push(value);\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn to_return;\r\n\t}\r\n\r\n\t\r\n\tgetLineStatus(line) {\r\n\t\tvar l= this.lines.get(line.toString());\r\n\t\tif(l!=null)return l.check()==true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetLineOwner(id)\r\n\t{\r\n\t\tvar l= this.lines.get(id);\r\n\t\treturn l.getPlayer();\r\n\t}\r\n\r\n\t\r\n\titerator()\r\n\t{\r\n\t\treturn this.lines.values();\r\n\t}\r\n\r\n\t\r\n\r\n}\r\n","import Dot from './Dot'\r\n/**\r\n * Classe che rappresenta un oggetto Box del campo da gioco. \r\n * La sua responsabilit� � quella di rappresentare i dati di un quadrato.\r\n *\r\n * @author Loccions\r\n */\r\nexport default class Box {\r\n\t\r\n\t\r\n\t/** punto a. */\r\n\ta;\r\n\t\r\n\t/** punto b. */\r\n\tb;\r\n\t\r\n\t/** punto c. */\r\n\tc;\r\n\t\r\n\t/** punto d. */\r\n\td;\r\n\t\r\n\t/**  Giocatore che ha completato il quadrato, -1 se incompleto. */\r\n\towner;\r\n\t\r\n\t/**\r\n\t * Istanzia un nuovo box.\r\n\t *\r\n\t * @param root Dot radice\r\n\t */\r\n\tconstructor(root) {\r\n\r\n\t\tthis.a = root;\r\n\t\tthis.b = root.shift('RIGHT');\r\n\t\tthis.c = root.shift('DOWN');\r\n\t\tthis.d = root.shift('DOWN');\r\n\t\tthis.owner = -1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * ritorna il proprietario del box.\r\n\t *\r\n\t * @return the owner\r\n\t */\r\n\tgetOwner()\r\n\t{\r\n\t\treturn this.owner;\r\n\t}\r\n\r\n\t/**\r\n\t * riempie il quadrato che � stato completato.\r\n\t *\r\n\t * @param player il numero giocatore che ha completato il quadrato\r\n\t */\r\n\tFill(player)\r\n\t{\r\n\t\tthis.owner = player;\r\n\t}\r\n\r\n\t/**\r\n\t * restituisce il punto a del quadrato\r\n\t *\r\n\t * @return Dot a\r\n\t */\r\n\tgetA() {\r\n\t\treturn this.a;\r\n\t}\r\n\t\r\n\t/**\r\n\t * restituisce il punto b del quadrato\r\n\t *\r\n\t * @return Dot b\r\n\t */\r\n\tgetB() {\r\n\t\treturn this.b;\r\n\t}\r\n\t\r\n\t/**\r\n\t * restituisce il punto c del quadrato\r\n\t *\r\n\t * @return Dot c\r\n\t */\r\n\tgetC() {\r\n\t    return this.c;\r\n\t}\r\n\t\r\n\t/**\r\n\t * restituisce il punto d del quadrato\r\n\t *\r\n\t * @return Dot d\r\n\t */\r\n\tgetD() {\r\n\t\treturn this.d;\r\n\t}\r\n\r\n\t\r\n\ttoString() {\r\n\t\treturn \"Box \" + this.a.toString();\r\n\t}\r\n\r\n\r\n\tequals(o) {\r\n\t\tif(o!=null && o instanceof Box)\r\n\t\t{\r\n\t\t\tif(this.compareTo((o)==0)) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t\r\n\tcompareTo(o) {\r\n\t\treturn this.a.compareTo(o.a);\r\n\t}\r\n\t\r\n\t\r\n}\r\n","import Dot from './Dot';\r\nimport Box from './Box';\r\n/**\r\n * La classe BoxManagerMap, la sua responsabilit� � quella di gestire l'insieme di quadrati presenti nel campo da gioco.\r\n * Implementa l'interfaccia BoxManager utilizzando come struttura dati una TreeMap dove ogni Box \r\n * � identificato dal suo punto radice, il quale corrisponde al punto minore tra i quattro presenti nel quadrato.\r\n * La classe Dot definisce in base a quali parametri un punto viene considerato minore di un altro nel campo da gioco.\r\n * \r\n * @author Loccions\r\n */\r\nexport default  class BoxManager{\r\n\r\n\r\n\t/** i quadrati del campo da gioco */\r\n\tboxes;\r\n\t\r\n\t/** contatore di quadrati completi */\r\n\tbox_count;\r\n\t\r\n\t/**\r\n\t * Istanzia un nuovo oggetto BoxManagerMap, l'insieme di quadtrati contenuti viene generato automaticamente\r\n\t * in base alle dimensioni del campo da gioco.\r\n\t *\r\n\t * @param h l'altezza del campo\r\n\t * @param w la larghezza del campo\r\n\t */\r\n\tconstructor(h,w) {\r\n\t\t\r\n\t\tthis.boxes = this.generateBoxes(h,w);\r\n\t\tthis.box_count = 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * genera tutti i quadrati che compongono il campo di gioco.\r\n\t *\r\n\t * @param h l'altezza del campo\r\n\t * @param w la larghezza del campo\r\n\t * @return la TreeMap contenente i quadrati del campo di gioco\r\n\t */\r\n\t generateBoxes(h,w) {\r\n\t\tvar bx = new Map();\r\n\t\tfor(var y = 0; y< h-1 ; y++)\r\n\t\t{\r\n\t\t\tfor(var x = 0 ; x< w-1; x++)\r\n\t\t\t{\r\n\t\t\t\tvar a =new Dot(x,y);\r\n\t\t\t\tvar box = new Box(a);\r\n\t\t\t\tbx.set(a.toString(), box);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bx;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Fill box.\r\n\t *\r\n\t * @param a the dot a\r\n\t * @param player the player number\r\n\t */\r\n\tfillBox(a,player) {\r\n\t\tthis.boxes.get(a.toString()).Fill(player);\r\n\t\tthis.box_count++;\r\n\t}\r\n\t\r\n\r\n\tgetBoxStatus(a)\r\n\t{\r\n\t\treturn this.getBox(a).getOwner();\r\n\t}\r\n\t\r\n\r\n\tgetBox(a) {\r\n\t\treturn this.boxes.get(a);\r\n\t}\r\n\r\n\r\n\r\n\titerator() {\r\n\t\t return this.boxes.values();\r\n\t}\r\n\r\n\r\n\tgetFilledBoxesCount() {\r\n\r\n\t\treturn this.box_count;\r\n\t}\r\n\r\n\r\n\tgetBoxesCount() {\r\n\t\treturn this.boxes.size;\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\r\n}\r\n","\r\nimport LineManager from './LineManager'\r\nimport BoxManager from './BoxManager'\r\nimport Line from './Line'\r\nimport Dot from './Dot'\r\nimport Box from './Box'\r\n/**\r\n * La classe Field implementa l'interfaccia Field utilizzando delle Map<K,V> come strutture dati per linee e quadrati.\r\n *\r\n * @author Loccions\r\n */\r\nexport default class Field{\r\n\t\r\n\t/**  dimensione del campo di gioco. */\r\n\th;w;\r\n\t\r\n\t/**  quadrati del campo di gioco. */\r\n\tboxes; \r\n\t\r\n\t/** linee del campo da gioco */\r\n\tlines;\r\n\t\r\n\t/**\r\n\t * Istanzia un nuovo MapField.\r\n\t *\r\n\t * @param h l'altezza\r\n\t * @param w la larghezza\r\n\t */\r\n\tconstructor(h, w) {\r\n\t\tthis.h=h;\r\n\t\tthis.w=w;\r\n\t\tthis.lines = new LineManager(h,w);\r\n\t\tthis.boxes = new BoxManager(h,w);\r\n\t}\r\n\t\r\n\r\n\r\n\t\r\n\r\n\t/**\r\n\t * Controlla lo stato di una linea\r\n\t *\r\n\t * @param a punto a della linea\r\n\t * @param b punto b della linea\r\n\t * @return true de � tracciata\r\n\t */\r\n\tcheckLine(a,b)\r\n\t{\r\n\t\treturn this.lines.getLineStatus(new Line(a,b));\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Controlla se una linea appena tracciata ha completato dei quadrati.\r\n\t *\r\n\t * @param id la stringa linea appena tracciata\r\n\t * @param player il giocatore che ha tracciato la linea\r\n\t * @return il numero di quadrati completati\r\n\t */\r\n\tisBoxComplete(id,player) \r\n\t{\r\n\t\tvar line = this.parseLine(id);\r\n\t\tvar a = line.getA();\r\n\t\tvar b = line.getB();\r\n\t\tif(!line.isVertical())\r\n\t\t{\r\n\t\t\treturn this.checkHorBoxes(a,b,player);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn this.checkVerBoxes(a,b,player);\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Controlla i quadrati adiacenti ad una linea orizzontale.\r\n\t *\r\n\t * @param a punto a della linea\r\n\t * @param b punto b della linea\r\n\t * @param player il giocatore che ha tracciato la linea\r\n\t * @return il numero di quadrati completati \r\n\t */\r\n\tcheckHorBoxes(a , b , player)\r\n\t{\r\n\t\t//Hor line\r\n\t\tvar topleft = a.shift('UP');\r\n\t\tvar topright = b.shift('UP');\r\n\t\tvar btmleft = a.shift('DOWN');\r\n\t\tvar btmright = b.shift('DOWN');\r\n\t\tvar result = 0;\r\n\r\n\t\tif(this.checkBox(a,topleft,topright,b))\r\n\t\t{\r\n\t\t\tthis.fillBox(a,topleft,topright,b,player);\r\n\t\t\tresult++;\r\n\t\t}\r\n\t\tif(this.checkBox(a,btmleft,btmright,b ))\r\n\t\t{\r\n\t\t\tthis.fillBox(a,btmleft,btmright,b,player);\r\n\t\t\tresult++;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Controlla i quadrati adiacenti ad una linea verticale.\r\n\t *\r\n\t * @param a punto a della linea\r\n\t * @param b punto b della linea\r\n\t * @param player il giocatore che ha tracciato la linea\r\n\t * @return il numero di quadrati completati\r\n\t */\r\n\tcheckVerBoxes(a,b,player)\r\n\t{\r\n\t\t\r\n\t\t\t//ver line\r\n\t\t\tvar topleft = a.shift('LEFT');\r\n\t\t\tvar topright = a.shift('RIGHT');\r\n\t\t\tvar btmleft = b.shift('LEFT');\r\n\t\t\tvar btmright = b.shift('RIGHT');\r\n\t\t\tvar result = 0;\r\n\t\t\tif( this.checkBox(a,topleft,btmleft,b)) \r\n\t\t\t{\r\n\t\t\t\tthis.fillBox(a,topleft,btmleft,b,player);\r\n\t\t\t\tresult++;\r\n\t\t\t}\r\n            if(this.checkBox(a,topright,btmright,b ))\r\n            {\r\n            \tthis.fillBox(a,topright,btmright,b,player);\r\n\t\t\t\tresult++;\r\n            }\r\n\t\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Riempie un quadrato\r\n\t *\r\n\t * @param a punto a del quadrato\r\n\t * @param b punto b del quadrato\r\n\t * @param c punto c del quadrato\r\n\t * @param d punto d del quadrato\r\n\t * @param player il giocatore che ha completato il quadrato\r\n\t */\r\n\tfillBox(a,b,c,d ,player)\r\n\t{\r\n\t\tvar root = Dot.Min(a,b,c,d);\r\n\t\tthis.boxes.fillBox(root,player);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Controlla se il quadrato � completo.\r\n\t *\r\n\t * @param a punto a del quadrato\r\n\t * @param b punto b del quadrato\r\n\t * @param c punto c del quadrato\r\n\t * @param d punto d del quadrato\r\n\t * @return true, se tutti e quattro i lati sono tracciati\r\n\t */\r\n\tcheckBox(a, b, c, d)\r\n\t{\r\n\t\tif(a.isInside(this.w,this.h)&&b.isInside(this.w,this.h)&&c.isInside(this.w,this.h)&&d.isInside(this.w,this.h))\r\n\t\treturn this.checkLine(a,b)&&this.checkLine(b,c)&&this.checkLine(c,d)&&this.checkLine(d,a);\r\n\t\telse return false;\r\n\t}\r\n\t\r\n\t\r\n\tgetAvailableLines() {\r\n\t\t\r\n\t\treturn this.lines.getAvailable();\r\n\t}\r\n\t\r\n\tgetWidth()\r\n\t{\r\n\t\treturn this.w;\r\n\t}\r\n\t\r\n\tgetHeight()\r\n\t{\r\n\t\treturn this.h;\r\n\t}\r\n\t\r\n\tgetLines() {\r\n\t\treturn this.lines.iterator();\r\n\t}\r\n\r\n\tgetLinePlayer(id)\r\n\t{\r\n\t\treturn this.lines.getLineOwner(id);\r\n\t}\r\n\r\n\tgetBoxes()\r\n\t{\r\n\t\treturn this.boxes.iterator();\r\n\t}\r\n\r\n\tgetBoxPlayer(id)\r\n\t{\r\n\t\treturn this.boxes.getBoxStatus(id);\r\n\t}\r\n\t\r\n\tisFull()\r\n\t{\r\n\t\treturn this.boxes.getFilledBoxesCount() == this.boxes.getBoxesCount();\r\n\t}\r\n\r\n\tdrawLine(line,player) \r\n\t{\t\r\n\t   this.lines.draw(line,player);\r\n\t   return this.isBoxComplete(line,player);\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.lines = new LineManager(this.h,this.w);\r\n\t\tthis.boxes = new BoxManager(this.h,this.w);\r\n\t}\r\n\r\n\tparseLine(id)\r\n\t{\r\n\t\tvar coords = id.split(\" \");\r\n\r\n\t\tvar xy = coords[0].split('-');\r\n\t\tvar x = parseInt(xy[0],10);\r\n\t\tvar y = parseInt(xy[1],10);\r\n\t\tvar a = new Dot(x,y);\r\n\r\n\t\t xy = coords[1].split('-');\r\n\t\t x = parseInt(xy[0],10);\r\n\t\t y = parseInt(xy[1],10);\r\n\t\tvar b = new Dot(x,y);\r\n\t\treturn new Line(a,b);\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport './MatchCPU.css';\r\nimport GameField from '../GameField/GameField'\r\nimport { Link } from 'react-router-dom';\r\nimport Octicon,{X,Play} from '@primer/octicons-react';\r\nimport Field from '../../Model/Field';\r\n\r\nclass MatchCPU extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            level:props.level,\r\n            x:props.x,\r\n            y:props.y,\r\n            field : new Field(props.y+1,props.x+1)\r\n        }\r\n    }\r\n\r\n\r\n    quitMatch()\r\n    {\r\n\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        return(<div className=\"wide padding-10\">\r\n            <div className={'overlay' + (this.state.level=='pvp online'?' show':'')}>\r\n                <div>\r\n                <strong>Match {this.state.level} </strong><br></br>\r\n\r\n                Not yet available!<br></br>\r\n\r\n                <Link to=\"/\">go back</Link> to the gamemode selection.\r\n                \r\n                </div>\r\n                 </div>\r\n        <div className=\"pop-header\" ><span><Octicon className=\"pop-header-icon\" icon={Play}></Octicon>DOTSANDBOXES</span> \r\n\r\n        <div className=\"modeinfo\">{this.state.level}</div> \r\n        <Link onClick={this.quitMatch} to=\"/\"><Octicon className=\"quit text-red\" icon={X}></Octicon></Link>\r\n        </div>\r\n        \r\n        \r\n        \r\n        <div className=\"flex-column fit-content\">\r\n           <GameField field={this.state.field} level={this.state.level}></GameField>\r\n        </div>\r\n        </div>\r\n        \r\n    )\r\n    }\r\n}\r\n\r\nexport default MatchCPU;","import React,{Component} from 'react'\r\nimport Octicon, {Graph} from '@primer/octicons-react'\r\nimport './Stats.css'\r\nclass Stats extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"pop flex-column stats padding-10\">\r\n                 <div className=\"pop-header wide \"><span><Octicon className=\"pop-header-icon\" icon={Graph}></Octicon> STATS</span></div>\r\n               <Octicon className=\"big-icon\" icon={Graph}></Octicon>\r\n               <p><strong>Check your Stats!</strong><br></br>\r\n               Sign in to start tracking your performances against other players.\r\n               </p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stats;","import React,{Component} from 'react'\r\nimport Octicon, {Organization} from '@primer/octicons-react'\r\nimport './Friends.css'\r\nclass Friends extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"pop flex-column friends padding-10\">\r\n\r\n                <div className=\"pop-header wide \"><span><Octicon className=\"pop-header-icon\" icon={Organization}></Octicon> FRIENDS</span></div>\r\n                <Octicon className=\"big-icon\" icon={Organization}></Octicon>\r\n                <p>\r\n                <strong>Play with your friends!</strong><br/>\r\n                Sign in to access your friend's list\r\n                </p>\r\n\r\n                </div>\r\n    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;","export default class Collapse{\r\n    static collapse(id)\r\n    {\r\n        console.log('collapsing ',id)\r\n        if(!document.getElementById(id).classList.contains('collapse-show'))\r\n        {\r\n            document.getElementById(id).classList.add('collapse-show');\r\n        }\r\n        else\r\n        {\r\n            document.getElementById(id).classList.remove('collapse-show');\r\n        }\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './Home.css';\r\nimport Nav from '../Nav/Nav.js';\r\nimport MatchCPU from '../MatchCPU/MatchCPU'\r\nimport Stats from '../Stats/Stats'\r\nimport Friends from '../Friends/Friends'\r\nimport Octicon, {Rocket,Tools,ChevronDown} from '@primer/octicons-react'\r\nimport Collapse from '../../Utils/collapse';\r\n\r\nimport {BrowserRouter,Switch,Route,Link} from \"react-router-dom\";\r\n\r\nclass Home extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            level:'medium',\r\n            x:7,\r\n            y:7\r\n        };\r\n    }\r\n\r\n    hiServer = () =>\r\n    {\r\n        fetch('/api/hi').then(res =>res.json()).then(json=>this.setState({message:json.message}, ()=>console.log(json.message)));   \r\n    }\r\n\r\n    onLevelChange = (e)=>this.setState({level:e.currentTarget.value})\r\n\r\n    onHeightChange = (e)=>this.setState({y:e.currentTarget.value})\r\n    onWidthChange = (e)=>this.setState({x:e.currentTarget.value})\r\n\r\n    render()\r\n    {\r\n        return(\r\n        <div className=\"wrapper bg-main\">\r\n        <BrowserRouter>\r\n            <Nav/>\r\n            <div className=\"content\">\r\n                <div className=\"pop gamespace\" id=\"gamespace\">\r\n            <Switch>\r\n             <Route path=\"/match\">\r\n                <MatchCPU level={this.state.level} x={this.state.x} y={this.state.y} />\r\n             </Route>\r\n\r\n             <Route path=\"/pvpmatch\">\r\n                <MatchCPU level= 'online' x={this.state.x} y={this.state.y}/>\r\n             </Route>\r\n        \r\n             <Route path=\"/\">\r\n                <div className=\"wide padding-10\">\r\n                <div className=\"pop-header\"> <Octicon className=\"pop-header-icon\" icon={Rocket}></Octicon>GAMEMODE SELECTION</div>\r\n                <div className=\"flex-column\">\r\n                    <br/>\r\n                <strong><strong><strong><b>DOTS</b></strong> AND <strong><b>BOXES</b></strong></strong> </strong>\r\n                <br/>\r\n                <Link to=\"/pvpmatch\">\r\n                <button className=\"btn\">Find an Opponent</button>\r\n                </Link>\r\n\r\n                <Link to=\"/match\">\r\n                <button className=\"btn btn-blue\"  >Play Offline</button>\r\n                </Link>\r\n                \r\n                   <div className=\"gamemode collapse-button\" onClick={()=>Collapse.collapse('level')}><b><Octicon icon={Tools}></Octicon> settings <Octicon icon={ChevronDown}></Octicon></b>\r\n                   </div>\r\n                   <div className=\"collapse\"  id=\"level\">\r\n                   <input type=\"radio\" name=\"level\" value=\"dummy\" checked={this.state.level === 'dummy'} onChange = {this.onLevelChange}/>CPU Dummy&nbsp;&nbsp;\r\n                   <br></br>\r\n                   <input type=\"radio\" name=\"level\" value=\"medium\" checked={this.state.level === 'medium'} onChange = {this.onLevelChange}/> CPU Medium&nbsp;&nbsp;\r\n                   <br></br>\r\n                   <input type=\"radio\" name=\"level\" value=\"impossible\" checked={this.state.level === 'impossible'} onChange = {this.onLevelChange}/>CPU Impossible&nbsp;&nbsp;\r\n                   <br></br>\r\n                   <input type=\"radio\" name=\"level\" value=\"1vs1\" checked={this.state.level === '1vs1'} onChange = {this.onLevelChange}/>Play with a friend&nbsp;&nbsp;\r\n                   </div>\r\n                \r\n                \r\n              \r\n\r\n\r\n                </div>\r\n                </div>\r\n\r\n\r\n             </Route>\r\n             \r\n            </Switch>\r\n            </div>\r\n\r\n            <div className=\"secondary\">\r\n            <Stats></Stats>\r\n            <Friends></Friends>\r\n            </div>\r\n            </div>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\n  \r\n    \r\n\r\n   \r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home/Home.js';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}